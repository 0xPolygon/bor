name: K8S DEVNET - REGRESSION DETECTOR
on:
  push:
  release:
    types: [prereleased]

jobs:
  deploy_devnet:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.before }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Setup Google Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'

    - uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
        project_id: 'prj-polygonlabs-devtools-dev'
        service_account: 'ci-k8s-cluster@prj-polygonlabs-devtools-dev.iam.gserviceaccount.com'

    - name: Install kubectl and gcloud kubectl auth plugin
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
        && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && gcloud components install gke-gcloud-auth-plugin

    - name: Install tomlq for config file preparation
      run: |
        pip3 install tomlq

    - name: Clone private polygon-devnets repo
      run: |
        eval `ssh-agent -s`
        ssh-add - <<< '${{ secrets.SSH_PRIVATE_KEY }}'
        git clone -b fix/pos_k8s_devnets git@github.com:maticnetwork/polygon-devnets.git

    - name: Deploy PoS devnet to isolated GKE namespace
      run: |
        echo "${{ secrets.GKE_CLUSTER_CREDENTIALS }}" > /tmp/cluster_credentials.yaml
        export KUBECONFIG=/tmp/cluster_credentials.yaml
        cd polygon-devnets/kubernetes/pos
        # metrics must be tagged by unique namespace (devnet name / pre-release id)
        # deployment must also create custom monitors by namespace
        kubectl apply -k overlays/gcr --namespace=pos --context=gke_prj-polygonlabs-devtools-dev_europe-west2_ci-cluster-1

    - name: Auto-apply load and report any regressions here
      run: |
        current_minute=$(date +'%M')
        end_minute=$((current_minute + 60)) # Corrected the missing closing parenthesis
        
        while [ $current_minute -lt $end_minute ]; do
          # TODO: call datadog API and get composite monitor status
          echo "REGRESSION TESTING RESULTS... PRINTED HERE... "
          sleep 600
          current_minute=$(date +'%M')
        done
