// Code generated by MockGen. DO NOT EDIT.
// Source: state_sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockHeaderProvider is a mock of HeaderProvider interface.
type MockHeaderProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderProviderMockRecorder
}

// MockHeaderProviderMockRecorder is the mock recorder for MockHeaderProvider.
type MockHeaderProviderMockRecorder struct {
	mock *MockHeaderProvider
}

// NewMockHeaderProvider creates a new mock instance.
func NewMockHeaderProvider(ctrl *gomock.Controller) *MockHeaderProvider {
	mock := &MockHeaderProvider{ctrl: ctrl}
	mock.recorder = &MockHeaderProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderProvider) EXPECT() *MockHeaderProviderMockRecorder {
	return m.recorder
}

// CurrentHeader mocks base method.
func (m *MockHeaderProvider) CurrentHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader.
func (mr *MockHeaderProviderMockRecorder) CurrentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockHeaderProvider)(nil).CurrentHeader))
}

// HeaderByNumber mocks base method.
func (m *MockHeaderProvider) HeaderByNumber(ctx context.Context, num rpc.BlockNumber) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, num)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockHeaderProviderMockRecorder) HeaderByNumber(ctx, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockHeaderProvider)(nil).HeaderByNumber), ctx, num)
}
